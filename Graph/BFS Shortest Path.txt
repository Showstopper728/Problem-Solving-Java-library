 static int BFS(Graph g,int n,int start,int end)
    {
        boolean[]visited = new boolean[n];
        int[] des = new int[n+1];
        Queue<Integer> q = new LinkedList<>();
        visited[start] = true;
        q.add(start);
        if (start==end)
            return 0;
        else
            des[end] = Integer.MAX_VALUE;
        while(!q.isEmpty())
        {
            int index = q.poll();
            for (int i=0;i<g.adjList[index].size();i++ )
            {

                if (!visited[g.adjList[index].get(i)]) {
                    visited[g.adjList[index].get(i)] = true;
                    q.add(g.adjList[index].get(i));
                    des[g.adjList[index].get(i)]= des[index]+1;
                }
            }
              if (index==end)
                  break;

        }
        return  des[end];
    }