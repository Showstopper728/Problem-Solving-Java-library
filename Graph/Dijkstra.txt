static int Dijkstra(int src,int dit)
    {
        boolean[]visited = new boolean[n+1];
        int[] dist= new int[n+1];

    
        Arrays.fill(dist,Integer.MAX_VALUE);
        dist[src] =0;
        PriorityQueue<pair> p = new PriorityQueue<>();
        p.add(new pair(0,src));
        for (int j=1;j<n+1;j++)
        {


            if (p.isEmpty())
                return -1;
            pair temp = p.poll();

            int min = temp.value;

            if (min==dit)
                return dist[dit];

            visited[min] = true;

            for (pair edge : g.adjList[min]) {
                if (!visited[edge.value]) {
                    if (edge.key+temp.key<dist[edge.value]) {
                        dist[edge.value]=edge.key+temp.key;
                      
                        p.add(new pair(edge.key + temp.key, edge.value));
                    }
                }
            }

        }
        return dist[dit];

    }